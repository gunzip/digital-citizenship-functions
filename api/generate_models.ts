// tslint:disable:no-console

import * as fs from "fs-extra";
import * as nunjucks from "nunjucks";
import * as prettier from "prettier";
import * as SwaggerParser from "swagger-parser";
import { Spec } from "swagger-schema-official";

/**
 * Generate typescript interfaces from OpenAPI (swagger) specs.
 * 
 * @param e               a configuration environment for nunjucks templating engine
 * @param specFileName    file name of the OpenAPI spec (must be inside 'api' directory)
 * @param root            the output directory root for generated files
 */
async function generateModelsFromApi(
  e: nunjucks.Environment,
  specFileName: string,
  root: string
): Promise<void> {
  const api: Spec = await SwaggerParser.parse(`api/${specFileName}.yaml`);
  const definitions = api.definitions;
  if (!definitions) {
    console.log("No definitions found");
    return;
  }

  const specCode = `
    // tslint:disable:object-literal-sort-keys

    // DO NOT EDIT
    // auto-generated by generated_model.ts from ${specFileName}.yaml

    export const specs = ${JSON.stringify(api)};
  `;
  await fs.writeFile(
    `${root}/${specFileName}.ts`,
    prettier.format(specCode, {
      parser: "typescript"
    })
  );

  for (const definitionName in definitions) {
    if (definitions.hasOwnProperty(definitionName)) {
      const definition = definitions[definitionName];
      console.log("-------", definitionName);
      console.log(definition);
      const code = e.render("model.ts.njk", {
        definition,
        definitionName
      });
      const prettifiedCode = prettier.format(code, {
        parser: "typescript"
      });
      await fs.writeFile(
        `${root}/definitions/${definitionName}.ts`,
        prettifiedCode
      );
    }
  }
}

nunjucks.configure({
  trimBlocks: true
});

const env = new nunjucks.Environment(
  new nunjucks.FileSystemLoader("api/templates")
);
env.addFilter("contains", <T>(a: ReadonlyArray<T>, item: T) => {
  return a.indexOf(item) !== -1;
});

generateModelsFromApi(env, "public_api_v1", "lib/api").then(
  () => console.log("done"),
  err => console.log(`Error: ${err}`)
);
